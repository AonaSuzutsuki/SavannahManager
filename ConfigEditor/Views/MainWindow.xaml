<Window x:Class="ConfigEditor_mvvm.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:commonViews="clr-namespace:CommonStyleLib.Views;assembly=CommonStyleLib"
        xmlns:app="clr-namespace:ConfigEditor_mvvm.LangResources"
        xmlns:viewModels="clr-namespace:ConfigEditor_mvvm.ViewModels"
        xmlns:behaviors="clr-namespace:ConfigEditor_mvvm.Views.Behaviors"
        mc:Ignorable="d"
        d:DataContext="{d:DesignInstance viewModels:MainWindowViewModel}"
        Icon="pack://application:,,,/CommonStyleLib;component/Resources/1.ico"
        ShowInTaskbar="True" Topmost="False" WindowStartupLocation="CenterScreen" WindowStyle="SingleBorderWindow"
        TextOptions.TextFormattingMode="Display" TextOptions.TextRenderingMode="ClearType" UseLayoutRounding="True" ResizeMode="CanResize"
        Title="Config Editor" Height="500" Width="700">

    <i:Interaction.Triggers>
        <i:EventTrigger EventName="Closing">
            <i:InvokeCommandAction Command="{Binding Closing}" />
        </i:EventTrigger>
        <i:EventTrigger EventName="Activated">
            <i:InvokeCommandAction Command="{Binding Activated}" />
        </i:EventTrigger>
        <i:EventTrigger EventName="Deactivated">
            <i:InvokeCommandAction Command="{Binding Deactivated}" />
        </i:EventTrigger>
        <i:EventTrigger EventName="StateChanged">
            <i:InvokeCommandAction Command="{Binding StateChanged}" />
        </i:EventTrigger>
        <i:EventTrigger EventName="KeyDown">
            <commonViews:InvokeDelegateCommandAction Command="{Binding KeyDown}" CommandParameter="{Binding RelativeSource={RelativeSource Self}, Path=InvokeParameter}" />
        </i:EventTrigger>
    </i:Interaction.Triggers>

    <WindowChrome.WindowChrome>
        <WindowChrome CaptionHeight="{x:Static SystemParameters.CaptionHeight}"
                      ResizeBorderThickness="{x:Static SystemParameters.WindowResizeBorderThickness}"
                      UseAeroCaptionButtons="False" />
    </WindowChrome.WindowChrome>

    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/CommonStyleLib;component/Styles/Icon.xaml" />
                <ResourceDictionary Source="pack://application:,,,/CommonStyleLib;component/Styles/Main.xaml" />
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Window.Resources>

    <Grid Style="{DynamicResource ResourceKey=BackgroundGrid}">
        <Border Name="AroundBorder" BorderBrush="{Binding AroundBorderColor.Value}" Opacity="{Binding AroundBorderOpacity.Value}" BorderThickness="1" />

        <Grid Margin="{Binding MainWindowMargin}">

            <StackPanel Orientation="Horizontal" Margin="5,0,0,0"
                        HorizontalAlignment="left"
                        VerticalAlignment="Top">
                <Image Source="{StaticResource Icon}" Width="15" Height="15" Stretch="Uniform" WindowChrome.IsHitTestVisibleInChrome="True">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="MouseDown">
                            <commonViews:InteractiveCommand Command="{Binding ImageMouseDown}" />
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </Image>
                <Label Content="Config Editor" Style="{DynamicResource ResourceKey=StatTitle}" />
                <Label Content="*" Visibility="{Binding ModifiedVisibility.Value}" Style="{DynamicResource ResourceKey=StatTitle}" />
            </StackPanel>
            <StackPanel Orientation="Horizontal" Margin="5"
                        HorizontalAlignment="Right"
                        VerticalAlignment="Top">
                <Button Name="MainWindowMinimumBt" Content="{Binding MainWindowMinimumBtContent}" Style="{DynamicResource CaptionButtonStyleKey}" Command="{Binding MainWindowMinimumBtClick}" />
                <Button Name="MainMaximumBt" Content="{Binding MainWindowMaximumBtContent}" Style="{DynamicResource CaptionButtonStyleKey}" Command="{Binding MainWindowMaximumBtClick}" />
                <Button Name="MainWindowCloseBt" Content="{Binding MainWindowCloseBtContent}" Style="{DynamicResource CaptionButtonStyleKey}" Command="{Binding MainWindowCloseBtClick}" />
            </StackPanel>

            <StackPanel Margin="1,25,1,0" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                <Menu IsMainMenu="True" Name="Menu" Height="25" Padding="3" VerticalAlignment="Top">
                    <MenuItem Header="{Binding Source={x:Static app:ResourceService.Current}, Path=Resources.UI_FileBT, Mode=OneWay}">

                        <MenuItem Name="NewFileBt" Header="{Binding Source={x:Static app:ResourceService.Current}, Path=Resources.UI_NewFileBT, Mode=OneWay}" Command="{Binding NewFileBtClicked}" />

                        <Separator Style="{DynamicResource MLB_Separator}" />

                        <MenuItem Name="OpenBt" Header="{Binding Source={x:Static app:ResourceService.Current}, Path=Resources.UI_OpenBT, Mode=OneWay}" Command="{Binding OpenBtClicked}" />
                        <MenuItem Name="SaveAsBt" Header="{Binding Source={x:Static app:ResourceService.Current}, Path=Resources.UI_SaveAsBT, Mode=OneWay}" Command="{Binding SaveAsBtClicked}" />
                        <MenuItem Name="SaveBt" Header="{Binding Source={x:Static app:ResourceService.Current}, Path=Resources.UI_SaveBT, Mode=OneWay}" IsEnabled="{Binding SaveBtEnabled.Value}" Command="{Binding SaveBtClicked}" />

                        <Separator Style="{DynamicResource MLB_Separator}" />

                        <MenuItem Header="Open (SFTP)" Command="{Binding OpenSftpCommand}" />
                        <MenuItem Header="Save As (SFTP)" Command="{Binding SaveAsSftpCommand}" />

                        <Separator Style="{DynamicResource MLB_Separator}" />

                        <MenuItem Name="MenuExitBt" Header="{Binding Source={x:Static app:ResourceService.Current}, Path=Resources.UI_ExitBT, Mode=OneWay}" Command="{Binding MainWindowCloseBtClick}" />

                    </MenuItem>
                </Menu>
            </StackPanel>

            <StackPanel Margin="10,55,10,0" Orientation="Horizontal" HorizontalAlignment="Stretch" VerticalAlignment="Top" Height="25">
                <Label Content="Version " Padding="2" Foreground="White" />
                <ComboBox Name="VersionList" ItemsSource="{Binding VersionList.Value, Mode=OneWay}" SelectedIndex="{Binding VersionListSelectedIndex.Value}" Width="120">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="SelectionChanged">
                            <i:InvokeCommandAction Command="{Binding VersionsListSelectionChanged}" />
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </ComboBox>
            </StackPanel>

            <Grid Margin="5,85,5,5">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="350" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>

                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="30" />
                        <RowDefinition Height="5" />
                        <RowDefinition />
                    </Grid.RowDefinitions>

                    <Grid>
                        <TextBox Text="{Binding FilterText.Value, UpdateSourceTrigger=PropertyChanged}" behaviors:PlaceHolderBehavior.PlaceHolder="Filter" />
                    </Grid>

                    <ListView Grid.Row="2" Height="Auto" Width="Auto" Name="ConfigsList" ItemsSource="{Binding ConfigList.Value}" SelectedIndex="{Binding ConfigListSelectedIndex.Value}" Foreground="White" Background="Transparent" ScrollViewer.VerticalScrollBarVisibility="Visible" ScrollViewer.HorizontalScrollBarVisibility="Visible">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="SelectionChanged">
                                <i:InvokeCommandAction Command="{Binding ConfigListSelectionChanged}" CommandParameter="{Binding Path=SelectedIndex, RelativeSource={RelativeSource AncestorType={x:Type ListView}}}" />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>

                        <ListView.View>
                            <GridView>
                                <GridViewColumn Width="220" Header="Properties" DisplayMemberBinding="{Binding Path=Property}" />
                                <GridViewColumn Width="110" Header="Value" DisplayMemberBinding="{Binding Path=Value}" />
                            </GridView>
                        </ListView.View>
                    </ListView>
                </Grid>

                <Grid Margin="10" Grid.Column="1">
                    <Grid.RowDefinitions>
                        <RowDefinition />
                        <RowDefinition Height="30" />
                    </Grid.RowDefinitions>

                    <StackPanel Orientation="Vertical">
                        <Grid>
                            <Label Content="Name"  Foreground="White"/>
                            <TextBlock Text="{Binding NameLabel.Value}" Foreground="#e0ffff" FontFamily="Script" FontWeight="Bold" Margin="25,25,0,0" TextWrapping="Wrap" />
                        </Grid>

                        <Grid>
                            <Label Content="Description"  Foreground="White"/>
                            <TextBlock Text="{Binding DescriptionLabel.Value}" Foreground="#e0ffff" FontFamily="Scrip" FontSize="12" FontWeight="Bold" Margin="25,25,0,0" TextWrapping="Wrap" />
                        </Grid>
                    </StackPanel>

                    <Grid Grid.Row="1">
                        <ComboBox ItemsSource="{Binding ValueList.Value}" Visibility="{Binding ValueListVisibility.Value}" SelectedIndex="{Binding ValueListSelectedIndex.Value}">
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="SelectionChanged">
                                    <i:InvokeCommandAction Command="{Binding ValueListSelectionChanged}" CommandParameter="{Binding Path=SelectedIndex, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" />
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                            
                            <ComboBox.ItemContainerStyle>
                                <Style TargetType="ComboBoxItem">
                                    <Setter
                Property="HorizontalContentAlignment"
                Value="Left" />
                                    <Setter
                Property="VerticalContentAlignment"
                Value="Center" />
                                </Style>
                            </ComboBox.ItemContainerStyle>
                        </ComboBox>
                        <TextBox Text="{Binding ValueText.Value, UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding ValueTextBoxVisibility.Value}" VerticalContentAlignment="Center">
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="TextChanged">
                                    <i:InvokeCommandAction Command="{Binding ValueTextTextChanged}" />
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </TextBox>
                    </Grid>

                </Grid>
            </Grid>

        </Grid>
    </Grid>
</Window>
